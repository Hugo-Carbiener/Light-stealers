using System;using System.Collections;using System.Collections.Generic;using UnityEngine;public class CameraManager : MonoBehaviour{    [Header("Camera positionning")]    [SerializeField] private Vector2 cameraOffset;    [Header("Move controls")]    [SerializeField] private float VerticalSpeed;    [SerializeField] private float lateralSpeed;    [Header("Move bounds")]    [SerializeField] private Vector2 minBounds;    [SerializeField] private Vector2 maxBounds;    [Header("Zoom contols")]    [SerializeField] private float zoomSpeed;        [SerializeField] private float startingZoom;    [SerializeField] private float nearZoomLimit;    [SerializeField] private float farZoomLimit;    IZoomStrategy zoomStrategy;    Vector2 frameMove;    float frameZoom;    private Camera cam;    private void Start()    {        // set components        cam = GetComponentInChildren<Camera>();        TilemapManager tilemapManager = TilemapManager.Instance;        GridLayout grid = TilemapManager.Instance.grid;        cam.transform.position = new Vector3(0, 0, -10f);        // zoom limits        farZoomLimit = grid.cellSize.x * (tilemapManager.getTilemapRows() + 10) / 2;        nearZoomLimit = grid.cellSize.x * 3 / 2; // when zoomed in displays 3 cells high        startingZoom = farZoomLimit;        // move bounds        minBounds = Vector2.zero;        maxBounds = new Vector2(grid.cellSize.y * tilemapManager.getTilemapColumns() * 3 / 4, grid.cellSize.x * tilemapManager.getTilemapRows());        zoomStrategy = new OrthographicZoomStrategy(cam, startingZoom);    }    private void OnEnable()    {        InputManager.onMoveInput += updateFrameMove;        InputManager.onZoomInput += updateFrameZoom;    }    private void OnDisable()    {        InputManager.onMoveInput -= updateFrameMove;        InputManager.onZoomInput -= updateFrameZoom;    }    private void updateFrameMove(Vector2 moveVector)    {        frameMove += moveVector;    }    private void updateFrameZoom(float zoomAmount)    {        frameZoom += zoomAmount;    }    private void LateUpdate()    {        if(frameMove != Vector2.zero)        {            Vector2 speedModFrameMove = new Vector2(frameMove.x * lateralSpeed, frameMove.y * VerticalSpeed);            transform.position += transform.TransformDirection(speedModFrameMove) * Time.deltaTime;            LockPositionInBounds();            frameMove = Vector2.zero;        }        if (frameZoom < 0f)        {            zoomStrategy.zoomIn(cam, Time.deltaTime * Mathf.Abs(frameZoom) * zoomSpeed, nearZoomLimit);            frameZoom = 0f;        }         else if ( frameZoom > 0f)        {            zoomStrategy.zoomOut(cam, Time.deltaTime * frameZoom * zoomSpeed, farZoomLimit);            frameZoom = 0f;        }    }    private void LockPositionInBounds()    {        transform.position = new Vector2(            Mathf.Clamp(transform.position.x, minBounds.x, maxBounds.x),            Mathf.Clamp(transform.position.y, minBounds.y, maxBounds.y)            );    }}